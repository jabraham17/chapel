#! /bin/bash -norc
#
# This just creates an appropriate .good.
#
target=$($CHPL_HOME/util/chplenv/chpl_platform.py --target)
tasks=$($CHPL_HOME/util/chplenv/chpl_tasks.py)

function cores_from_lscpu_or_proc_cpuinfo() {
  numCoresPerSocket=$( lscpu 2>/dev/null | grep -m 1 '^Core(s) per socket:' |
                       sed 's/^[^0-9]*\([0-9][0-9]*\).*$/\1/' )
  numSockets=$( lscpu 2>/dev/null | grep -m 1 '^Socket(s):' |
                sed 's/^[^0-9]*\([0-9][0-9]*\).*$/\1/' )
  if [[ -n $numCoresPerSocket && -n $numSockets ]] ; then
    numCores=$(( $numCoresPerSocket * $numSockets ))
    return
  fi
  if [[ -f /proc/cpuinfo ]] ; then
    #
    # Assumptions about /proc/cpuinfo:
    # - There is a separate "processor" block for each logical CPU.
    # - The CPUs are heterogeneous in terms of both cores/socket and
    #   logical CPUs/core.  (This is true now but someday won't be!)
    # - The "cpu cores" entry gives physical CPUs/socket.
    # - The "siblings" entry gives logical CPUs/socket.
    # - If either "cpu cores" or "siblings" entries are not present,
    #   each processor block is assumed to represent a hardware core.
    #   (This is broken in cygwin at least sometimes.)   Otherwise,
    #   "siblings"/"cpu cores" is the logical/physical CPU ratio.
    #
    numPUs=$( grep -c '^processor[[:space:]][[:space:]]*: ' /proc/cpuinfo )
    numCores1=$( grep -m 1 '^cpu cores[[:space:]][[:space:]]*: ' /proc/cpuinfo |
                 sed 's/^[^[:digit:]]*\([[:digit:]][[:digit:]]*\).*$/\1/' )
    numSibs1=$( grep -m 1 '^siblings[[:space:]][[:space:]]*: ' /proc/cpuinfo |
                sed 's/^[^[:digit:]]*\([[:digit:]][[:digit:]]*\).*$/\1/' )
    if [[ -z $numCores1 || -z $numSibs1 ]] ; then
      numCores=$numPUs
    else
      sibsPerCore=$(( $numSibs1 / $numCores1 ))
      numCores=$(( $numPUs / $sibsPerCore ))
    fi
  else
    numCores=0
  fi
}

case $target in
  linux*|cray-xc|cygwin*)
    cores_from_lscpu_or_proc_cpuinfo
    echo $numCores > $1.good;;

  darwin)
    case $tasks in
      qthreads)
        echo $( sysctl -n hw.perflevel0.physicalcpu 2>/dev/null || sysctl -n hw.physicalcpu ) > $1.good;;
      *)
        echo $( sysctl -n hw.physicalcpu ) > $1.good;;
    esac
    ;;

  *)
    cores_from_lscpu_or_proc_cpuinfo
    echo $numCores > $1.good;;
esac
