COMMON PITFALLS WITH DOXYGEN (THAT BREAK THE DOCS BUILD)

Whenever you run into a Doxygen problem that breaks the docs build,
make sure to explain what you did to fix it here.


---
ERROR: "WARNING: cpp: identifier reference target not found
---

Doxygen will fail to resolve:

  - C++ standard library types (that are not builtin, e.g. `int64_t`)
  - Any `compiler/dyno` types that are generated by macros (for now)
  - any dyno types that are defined in no-doc sections
  - C++11 "in-class member initializers" for enum fields

Just add these types to `$CHPL_HOME/doc/util/nitpick_ignore`.

An "in-class member initializer" for a field looks like:

  `WhereClauseResult whereClauseResult = WHERE_TBD;`

Doxygen can't seem to resolve these when the RHS is an enum.

`base.rst` needs to include types that might be declared in the chpl
namespace elsewhere. Examples of this are chp::owned, chpl::Iterable,
and chpl::UniqueString.

---
"WARNING: Invalid C++ declaration: Expected end of definition."
---

Often followed by code like:

  `template<> MostSpecificCandidates >`
  `template<typename A, typename B> pair< A, B > >`

These are usually the definitions of `update()` functions that are
used by the query system. They are heavily templated. Just put the
function inside a DO_NOT_DOCUMENT block like so:

  /// \cond DO_NOT_DOCUMENT
  template<> struct update<resolution::ResolvedExpression> {
    bool operator()(resolution::ResolvedExpression& keep,
                    resolution::ResolvedExpression& addin) const {
      return defaultUpdate(keep, addin);
    }
  };
  /// \endcond

These probably aren't worth figuring out how to fix, and they don't
really need documentation anyway.


---
"WARNING: Invalid C++ declaration: Expected identifier in nested name."
---

This seems to come up in a setting like

  class Something {
    enum {
      A = 1,
      B = 2
    };
  }

it seems to be sensitive to the version of doxygen.

If doc/rst/conf.py includes `breathe_debug_trace_directives = True`
then the log will include something like:

  Running directive: .. cpp:enum:: 

for this case.

---
"CRITICAL: Duplicate ID: <long alphanumeric string>"
---

Unclear at this time what truly causes these kinds of errors, but it is
suspected to be a bug in doxygen.

A real-world example of this kind of error:

```
$CHPL_HOME/doc/rst/developer/compiler-internals/types.rst:6: CRITICAL: Duplicate ID: "_param_tag_8h_1ac254bac687cc93f8b6cb77b99f231f82".
CHPL_HOME/doc/rst/developer/compiler-internals/types.rst:6: WARNING: Duplicate explicit target name: "_param_tag_8h_1ac254bac687cc93f8b6cb77b99f231f82".
```

This particular error concerned the ``ParamTag`` type. Because we make
``ParamTag`` available via ``chpl::types::ParamTag`` with a statement like the
one below, doxygen seems to get confused and emits the error:

```
using chpl::types::paramtags::ParamTag;
```

Disabling documentation of the 'using' statement quiets things down.

Using the listed ID, you can search in ``build/doc/doxygen/xml/`` and from
there can usually find a proper type name, and more useful information.
